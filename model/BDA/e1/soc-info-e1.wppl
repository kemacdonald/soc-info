// webppl soc-info-e1.wppl --require webppl-json 1
// requires webppl package: webppl-json

var index = last(process.argv) // load index as last command line index


/////////////////////
/////// UTILS ///////
/////////////////////

var rawProb = function(dist, val) {
  Math.pow(Math.E, dist.score(val))
};
           
var getSymbolEnt = function(prob) {
  prob == 0 ? 0 : prob*Math.log2(prob)* -1
};

var computeEntropy = function(probsVect) {
  var entropyEach = map(function(x) { return getSymbolEnt(x) }, probsVect);  
  var entropyTotal = sum(entropyEach);
  return entropyTotal;
};

var bayesFun = function(A, B, BGivenA) {
  (A * BGivenA) / B
}

var infoGainAnswer = function(priorEnt, condProbs) {
  var posteriorEnt = computeEntropy(condProbs);
  return priorEnt - posteriorEnt;
}

var infoGainQuestion = function(infoGainAnswerVect, probAnswerVect) {
  var multiply = function(x, y) { return x * y; };
  var posteriorEnt = sum(map2(multiply, infoGainAnswerVect, probAnswerVect));
  return posteriorEnt
}

var round = function(x){
  return Math.round(x * 100) / 100
}

// goal weights
var weightBins = map(round, _.range(0,1, 0.1))
var phiWeights = repeat(weightBins.length, function(){1})
var goalWeightPrior = Infer({model: function(){
  return uniformDraw(weightBins)
}})

var nBins = weightBins.length;
var kernelWidth = weightBins.length / 4;
// var kernelWidth = 10 / 4; // FIXME: hacky
var kernelFn = function(prevVal){
  var i = weightBins.indexOf(prevVal);
  var upper = (i + kernelWidth) > nBins ? nBins : i + kernelWidth;
  var lower = (i - kernelWidth) < 0 ? 0 : i - kernelWidth;
  return Categorical({vs: weightBins.slice(lower,upper),
                      ps: phiWeights.slice(lower,upper)})
}



/////////////////////
//// DEFINE VARS ////
/////////////////////

var data = json.read('e1-actionData.json');

var goals = _.uniq(_.map(data, "goal"));
// var obsPresOptions = _.uniq(_.map(data, "obsPres"));
var obsPres = [1, 0];

// var weightBins = [0.1, 0.3, 0.5, 0.7, 0.9]

var machineTypes = ["button", "handle", "both"];

// p(machine)
var machineTypePrior = Categorical({vs: machineTypes,
                                    ps: [.4, .4, .2]});

// p(buttonPress)
var actions = ["button", "handle", "both"];
var actionPrior = Categorical({vs: actions,
                                    ps: [.4, .3, .3]}); 

// p(music | action)
var playMusic = function(action) {
  (action == "button") ? .4:
  (action == "handle") ? .4:
  (action == "both") ? 1:
  0
}

// p(machine identity | action & music)
var testMachine = function(state, action) {
  return (action == "button" ? 
          Categorical({vs: machineTypes, 
                       ps: [1, 0, 0]}) :
          action == "handle" ? 
          Categorical({vs: machineTypes, 
                       ps: [0, 1, 0]}) :
          action == "both" ? 
          Categorical({vs: machineTypes, 
                       ps: [0.4, 0.4, 0.2]}) :
          "nothing");
}

// compute info gain for question involving a particular button press (A, B, or A&B)
var igQuestion = function(action) {
  var priorEntLearner = computeEntropy(
    map (function (x) { return Math.pow(Math.E, machineTypePrior.score(x))}, 
         machineTypes));

  var igAnswerYes = infoGainAnswer(priorEntLearner, 
                                    map(function(x) 
                                        {return rawProb(testMachine("state", action),x)}, 
                                        machineTypes))
  var igAnswerNo = infoGainAnswer(priorEntLearner, 
                                    map(function(x) {return 1-rawProb(testMachine("state", action),x)}, 
                                        machineTypes))

  return infoGainQuestion(
                 [igAnswerYes, igAnswerNo],
                 [playMusic(action), 
                  1-playMusic(action)])
};



/////////////////////
/////// MODEL ///////
/////////////////////


var model = function() {

// var optimality = 1.7;
var parameter = {
	optimality: uniformDrift({a: 0, b: 10, width:0.1})
};

var observer1 = cache(function(action) {
   return Infer({method: "enumerate"}, 
function() {
     var competence = playMusic(action);
     return competence;
  }); 
}, 10000)

var learner1 = cache(function(exptCondInfo) {
   return Infer({method: "enumerate"}, function() {
	var phi_learning = exptCondInfo.phi_learning;
	var phi_perf = exptCondInfo.phi_perf;
	var phi_pres = exptCondInfo.phi_pres;
	var observerPresent = exptCondInfo.obsPres	
	var goal = exptCondInfo.goal
	
	display("phi_learning" + phi_learning)
	display("phi_perf" + phi_perf)
	display("phi_pres" + phi_pres)
	display("observerPresent" + observerPresent)
	
     var action = sample(actionPrior);
     var competence = uniformDraw([0,1]);
// 	var competence = sample(uniformDrift({a: 0, b: 1, width:0.1}))

var O1 = observer1(action);

    var learningUtility = phi_learning*igQuestion(action)/Math.log2(actions.length)
//     var learningUtility = phi_learning*igQuestion(action)
    var presentationUtility = observerPresent*phi_pres*rawProb(O1,competence)
   var performanceUtility = phi_perf*playMusic(action)
   
    var learnerUtility = observerPresent == 1 ? 
    learningUtility + presentationUtility + performanceUtility :
    learningUtility + performanceUtility

    factor(parameter.optimality*learnerUtility)
    return action;  
   
  });   
}, 10000)

/////////////////////////////
/////// MODEL FITTING ///////
/////////////////////////////

var goalWeightsAndPostPred = map(function(goal){
map(function(observerPresent){
var phiLearnPerf = {
phi: sample(goalWeightPrior)
}
var betaPres = {
beta: sample(goalWeightPrior)
}

    var normalized_goalWeights = normalize([phiLearnPerf.phi, 1-phiLearnPerf.phi, betaPres.beta])
    
	var actionData = _.filter(data, {obsPres: observerPresent, goal: goal});
	var exptConditionInfo = {
		action:false,
		goal: goal,
		obsPres: goal == "noGoal" ? 0 : 1,		
		phi_learning: goal == "noGoal" ? phiLearnPerf.phi : normalized_goalWeights[0],
		phi_perf: goal == "noGoal" ? 1-phiLearnPerf.phi : normalized_goalWeights[1],
		phi_pres: goal == "noGoal" ? 0 : normalized_goalWeights[2],
	};
	
	var modelPredictions = learner1(exptConditionInfo);
	
	mapData({data: actionData}, function(d) {
		observe(modelPredictions, d.action)
	});
	
	var postSupport = modelPredictions.support();
	
	var postPredictive = map(function(a){
		return {
			key: "posteriorPredictive",
			goal: goal,
			action: a,
			val: Math.exp(modelPredictions.score(a))
		}
	}, postSupport)

		var postPred = _.flattenDeep([
	postPredictive,
	{key: "phiLearning", goal: goal, action: "NA", val: exptConditionInfo.phi_learning},
	{key: "phiPerformance", goal: goal, action: "NA", val: exptConditionInfo.phi_perf},	
	{key: "phiPresentation", goal: goal, action: "NA", val: exptConditionInfo.phi_pres}	
	])
	return postPred
	
}, obsPres)
}, goals)

var returnList = _.flattenDeep([
	goalWeightsAndPostPred,
	{key: "optimality", goal: "NA", action: "NA", val: parameter.optimality}
])


  var returnObj = _.fromPairs(map(function(i){
    [i.key + "_" + i.goal + "_" + i.action, i.val]
  }, returnList))

  return returnObj

}


var numSamples = 10;
var method = "MCMC";
var samples = numSamples;
var burn = numSamples / 2;
var posterior = Infer({model, method, samples, burn, verbose: true})
var filename = 'results/soc-info-ver1-mcmc'+
numSamples+'_burn'+burn+'_chain'+index+'.json'

json.write(filename, posterior)

"output written to " + filename;
